{"version":3,"sources":["components/Lists.js","mockData.js","App.js","reportWebVitals.js","index.js"],"names":["Lists","props","rows","rowHeight","tableHeight","columns","Object","keys","heightTablebody","length","useState","top","index","end","Math","ceil","scroll","setScroll","className","map","name","i","style","height","onScroll","scrollTop","target","floor","tempScroll","position","display","maxHeight","width","tempRows","rowAttrs","left","lineHeight","rowsIndex","trNode","key","column","push","calcalatedRows","defaultProps","mockData","Array","fill","val","id","fullname","random","toString","substring","company","address","country","age","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAGMA,EAAQ,SAAAC,GAAU,IACdC,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,UAAWC,EAAgBH,EAAhBG,YACnBC,EAAUC,OAAOC,KAAKL,EAAK,IAC3BM,EAAkBL,EAAYD,EAAKO,OAHpB,EAIOC,mBAAS,CACnCC,IAAK,EACLC,MAAO,EACPC,IAAKC,KAAKC,KAAmB,EAAdX,EAAkBD,KAPd,mBAIda,EAJc,KAINC,EAJM,KA4DrB,OACE,qCACE,uBAAOC,UAAU,eAAjB,SACE,gCACE,oBAAIA,UAAU,KAAd,SACGb,EAAQc,KAAI,SAACC,EAAMC,GAAP,OACX,6BAAaD,GAAJC,YAKjB,uBACEH,UAAY,gBACZI,MAAS,CACPC,OAAQnB,EAAcI,EACpBA,EAAkB,EAElBJ,GAEJoB,SApEW,SAAC,GAAgB,IACxBC,EADuB,EAAbC,OACVD,UACFb,EAAQE,KAAKa,MAAMF,EAAYtB,GAC/ByB,EAAU,eAAQZ,GAExBY,EAAWhB,MAAQA,EACnBgB,EAAWf,IAAMD,EAAQE,KAAKC,KAAoB,EAAdX,EAAmBD,GACvDyB,EAAWjB,IAAOc,EAAYtB,EAAaA,EAE3Cc,EAAUW,IAmDR,SAUE,uBACEN,MAAS,CACPO,SAAU,WACVC,QAAS,eACTP,OAAQf,EACRuB,UAAWvB,EACXwB,MAAO,QANX,SAzDiB,WACrB,IAAMJ,EAAU,eAAQZ,GAClBJ,EAAUgB,EAAVhB,MACEC,EAAQe,EAARf,IACJoB,EAAW,GAJY,aAOzB,GAAIrB,GAASV,EAAKO,OAEhB,OADAG,EAAQV,EAAKO,OACb,QAGF,IAAMyB,EAAW,CACfZ,MAAO,CACLO,SAAU,WACVlB,IAAMC,EAAQT,EACdgC,KAAM,EACNZ,OAAQpB,EACRiC,WAAW,GAAD,OAAKjC,EAAL,OAEZe,UAAU,MAAD,OAASN,EAAQ,IAAO,EAAI,SAAW,YAG5CyB,EAAYnC,EAAKU,GACjB0B,EACJ,wDAAQJ,GAAR,IAAkBK,IAAK3B,IACpBP,EAAQc,KAAI,SAACqB,EAAQnB,GAAT,OAAgB,6BAAagB,EAAUG,IAAdnB,OAG1CY,EAASQ,KAAKH,GAEd1B,KAzBF,EAAG,kBAGC,YAuBKA,EAAQC,GAEjB,OAAOoB,EAgCAS,WAOX1C,EAAM2C,aAAe,CACnBxC,UAAW,GACXC,YAAa,KASAJ,QC9GF4C,EAAW,IAAIC,MAAM,KAASC,MAAK,GAAM3B,KAAI,SAAC4B,EAAKC,GAAN,MAAc,CACtEA,GAAIA,EAAK,EACTC,SAAUnC,KAAKoC,SAASC,SAAS,IAAIC,UAAU,GAC/CC,QAASvC,KAAKoC,SAASC,SAAS,IAAIC,UAAU,GAC9CE,QAASxC,KAAKoC,SAASC,SAAS,IAAIC,UAAU,GAC9CG,QAASzC,KAAKoC,SAASC,SAAS,IAAIC,UAAU,GAC9CI,IAAK1C,KAAKC,KAAqB,GAAhBD,KAAKoC,c,MCSPO,MAXf,WACE,OACE,qBAAKvC,UAAU,YAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAIA,UAAU,QAAd,oBAA8B0B,EAASnC,UACvC,cAAC,EAAD,CAAOP,KAAM0C,UCENc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7ea69e6e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Lists = props => {\n  const { rows, rowHeight, tableHeight } = props;\n  const columns = Object.keys(rows[0]);\n  const heightTablebody = rowHeight * rows.length;\n  const [scroll, setScroll] = useState({\n    top: 0,\n    index: 0,\n    end: Math.ceil(tableHeight * 2 / rowHeight)\n  }); \n\n  // onScroll\n  const onScroll = ({ target }) => {\n    const { scrollTop } = target;\n    const index = Math.floor(scrollTop / rowHeight)\n    const tempScroll = { ...scroll };\n\n    tempScroll.index = index\n    tempScroll.end = index + Math.ceil((tableHeight * 2) / rowHeight)\n    tempScroll.top = (scrollTop / rowHeight) * rowHeight\n\n    setScroll(tempScroll);\n  }\n\n  // calcalated Rows\n  const calcalatedRows = () => {\n    const tempScroll = { ...scroll };\n    let { index } = tempScroll;\n    const { end } = tempScroll;\n    let tempRows = []\n\n    do {\n      if (index >= rows.length) {\n        index = rows.length\n        break;\n      }\n      // style for row of table\n      const rowAttrs = {\n        style: {\n          position: 'absolute',\n          top: (index * rowHeight),\n          left: 0,\n          height: rowHeight,\n          lineHeight: `${rowHeight}px`\n        },\n        className: `tr ${(index % 2) === 0 ? 'tr-odd' : 'tr-even'}`\n      }\n\n      const rowsIndex = rows[index];\n      const trNode = (\n        <tr {...rowAttrs} key={index}>\n          {columns.map((column, i) => (<td key={i}>{rowsIndex[column]}</td>))}\n        </tr>\n      );\n      tempRows.push(trNode);\n\n      index++;\n    } while (index < end)\n\n    return tempRows;\n  }\n  return (\n    <>\n      <table className=\"table-header\">\n        <thead>\n          <tr className=\"tr\">\n            {columns.map((name, i) =>\n              <th key={i}>{name}</th>\n            )}\n          </tr>\n        </thead>\n      </table>\n      <table\n        className = \"table-content\"\n        style = {{\n          height: tableHeight > heightTablebody ?\n            heightTablebody + 2\n            :\n            tableHeight\n        }}\n        onScroll = { onScroll }\n      >\n        <tbody\n          style = {{\n            position: 'relative',\n            display: 'inline-block',\n            height: heightTablebody,\n            maxHeight: heightTablebody,\n            width: '100%'\n          }}\n        >\n          {calcalatedRows()}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nLists.defaultProps = {\n  rowHeight: 35, // default height of row is 35px\n  tableHeight: 352 // default height of table is 352 // In order to see 10 rows are visibled\n}\n\nLists.propTypes = {\n  rowHeight: PropTypes.number.isRequired,\n  tableHeight: PropTypes.number.isRequired,\n  rows: PropTypes.arrayOf(PropTypes.object).isRequired\n}\n\nexport default Lists;\n","// Randomized 1.000.000 records\nexport const mockData = new Array(1000000).fill(true).map((val, id) => ({\n  id: id + 1,\n  fullname: Math.random().toString(20).substring(8),\n  company: Math.random().toString(20).substring(8),\n  address: Math.random().toString(20).substring(8),\n  country: Math.random().toString(20).substring(8),\n  age: Math.ceil(Math.random() * 80)\n}));\n","import React from 'react';\nimport Lists from './components/Lists';\nimport { mockData } from './mockData';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"demo-page\">\n      <div className=\"lists-wrap\">\n        <h1 className=\"title\">Total: {mockData.length}</h1>\n        <Lists rows={mockData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}